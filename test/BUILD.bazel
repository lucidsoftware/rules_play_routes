load("@rules_scala_annex//rules:scala.bzl", "scala_library", "scala_test")
load("//play-routes:play-routes.bzl", "play_routes")

play_routes(
    name = "play-routes",
    srcs = ["conf/routes"],
    include_play_imports = True,
)

play_routes(
    name = "play-routes-basic1",
    srcs = ["conf/basic1.routes"],
    include_play_imports = True,
)

play_routes(
    name = "play-routes-basic2",
    srcs = ["conf/basic2.routes"],
    include_play_imports = True,
)

play_routes(
    name = "play-routes-large",
    srcs = ["conf/large.routes"],
    include_play_imports = True,
)

play_routes(
    name = "play-routes-additional-imports",
    srcs = ["conf/additional_imports.routes"],
    include_play_imports = True,
    routes_imports = [
        "rulesplayroutes.test.User",
        "rulesplayroutes.test.binders._",
    ],
)

play_routes(
    name = "play-routes-specified-generator",
    srcs = ["conf/generator.routes"],
    include_play_imports = True,
    routes_generator = "play.routes.compiler.InjectedRoutesGenerator",
)

play_routes(
    name = "play-routes-reverse-router",
    srcs = ["conf/reverse_router.routes"],
    generate_reverse_router = True,
    include_play_imports = True,
)

# TOOD: Figure out what this does and add the test for it
# play_routes(
#   name = "play-routes-namespace-router",
#   srcs = ["conf/namespace_router.routes"],
#   include_play_imports = True,
#   generate_reverse_router = True,
#   namespace_reverse_router = True,
# )

scala_test(
    name = "play-routes-compiler-test",
    srcs = glob(["app/**/*.scala"]) + [
        "PlayRoutesCompilerTest.scala",
        ":play-routes",
        ":play-routes-large",
        ":play-routes-basic1",
        ":play-routes-basic2",
        ":play-routes-additional-imports",
        ":play-routes-specified-generator",
        ":play-routes-reverse-router",
        # ":play-routes-namespace-router",
    ],
    deps = [
        "@play_routes_test//:javax_inject_javax_inject",
        "@play_routes_test//:org_apache_pekko_pekko_actor_3",
        "@play_routes_test//:org_playframework_play_3",
        "@play_routes_test//:org_playframework_play_configuration_3",
        "@play_routes_test//:org_playframework_play_guice_3",
        "@play_routes_test//:org_playframework_play_specs2_3",
        "@play_routes_test//:org_playframework_play_test_3",
        "@play_routes_test//:org_specs2_specs2_common_3",
        "@play_routes_test//:org_specs2_specs2_core_3",
        "@play_routes_test//:org_specs2_specs2_matcher_3",
    ],
)

play_routes(
    name = "play-routes-reverse-router-only",
    srcs = ["conf2/routes"],
    generate_forwards_router = False,
    generate_reverse_router = True,
)

play_routes(
    name = "play-routes-forward-only",
    srcs = ["conf2/routes"],
    generate_forwards_router = True,
    generate_reverse_router = False,
)

scala_test(
    name = "split-forward-reverse-routes-test",
    srcs = glob(["app/**/*.scala"]) + [
        "PlayReverseRoutesOnlyTest.scala",
        "PlayForwardRoutesOnlyTest.scala",
        ":play-routes-forward-only",
    ],
    deps = [
        ":common",
        "@play_routes_test//:javax_inject_javax_inject",
        "@play_routes_test//:org_apache_pekko_pekko_actor_3",
        "@play_routes_test//:org_playframework_play_3",
        "@play_routes_test//:org_playframework_play_configuration_3",
        "@play_routes_test//:org_playframework_play_guice_3",
        "@play_routes_test//:org_playframework_play_specs2_3",
        "@play_routes_test//:org_playframework_play_test_3",
        "@play_routes_test//:org_specs2_specs2_common_3",
        "@play_routes_test//:org_specs2_specs2_core_3",
        "@play_routes_test//:org_specs2_specs2_matcher_3",
    ],
)

scala_library(
    name = "common",
    srcs = [
        "common/TestReverseRoutesOnly.scala",
        ":play-routes-reverse-router-only",
    ],
    deps = [
        "@play_routes_test//:org_playframework_play_3",
    ],
)
